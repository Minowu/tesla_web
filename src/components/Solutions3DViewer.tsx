import React, { useState, useEffect, Suspense } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, Environment, useGLTF, Float, Html } from '@react-three/drei';
import { useAppStore } from '../store/appStore';

interface Solution {
  id: string;
  title: string;
  titleEn: string;
  description: string;
  icon: string;
  color: string;
  gradient: string;
  features: string[];
  applications: string[];
  modelPath: string;
  stats: {
    label: string;
    value: string;
  }[];
  benefits: string[];
  technology: string[];
}

// 3D Model Component
const ModelComponent: React.FC<{ modelPath: string }> = ({ modelPath }) => {
  try {
    const { scene } = useGLTF(modelPath);
    
    return (
      <Float
        speed={2}
        rotationIntensity={0.5}
        floatIntensity={0.5}
      >
        <primitive object={scene} scale={1.5} />
      </Float>
    );
  } catch (error) {
    console.error('Error loading 3D model:', error);
    return (
      <Html center>
        <div className="model-error">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h3>Kh√¥ng th·ªÉ t·∫£i model 3D</h3>
          <p>Vui l√≤ng th·ª≠ l·∫°i sau</p>
        </div>
      </Html>
    );
  }
};

const solutions: Solution[] = [
  {
    id: 'agv',
    title: 'AGV T·ª± ƒë·ªông',
    titleEn: 'Automated Guided Vehicle',
    description: 'H·ªá th·ªëng xe t·ª± ƒë·ªông d·∫´n ƒë∆∞·ªùng th√¥ng minh cho logistics v√† s·∫£n xu·∫•t',
    icon: 'üöõ',
    color: '#00d4ff',
    gradient: 'linear-gradient(135deg, #00d4ff, #0099cc)',
    features: [
      'D·∫´n ƒë∆∞·ªùng laser SLAM',
      'T·∫£i tr·ªçng 500-2000kg',
      'T√≠ch h·ª£p WMS/ERP',
      'B·∫£o m·∫≠t ƒëa l·ªõp',
      'B√°o c√°o real-time',
      'B·∫£o tr√¨ d·ª± ƒëo√°n'
    ],
    applications: [
      'Kho h√†ng t·ª± ƒë·ªông',
      'S·∫£n xu·∫•t linh ho·∫°t',
      'B·ªánh vi·ªán',
      'Trung t√¢m ph√¢n ph·ªëi',
      'Nh√† m√°y th√¥ng minh',
      'Logistics'
    ],
    modelPath: '/models/agv.glb',
    stats: [
      { label: 'T·∫£i tr·ªçng', value: '2000kg' },
      { label: 'T·ªëc ƒë·ªô', value: '2m/s' },
      { label: 'Pin', value: '8h' },
      { label: 'ƒê·ªô ch√≠nh x√°c', value: '¬±5mm' }
    ],
    benefits: [
      'Gi·∫£m 60% chi ph√≠ v·∫≠n h√†nh',
      'TƒÉng 80% hi·ªáu su·∫•t',
      'An to√†n 100%',
      'Linh ho·∫°t 24/7'
    ],
    technology: [
      'SLAM Navigation',
      'LiDAR Sensing',
      'AI Path Planning',
      '5G Connectivity',
      'Edge Computing',
      'IoT Integration'
    ]
  },
  {
    id: 'amr',
    title: 'AMR Th√¥ng minh',
    titleEn: 'Autonomous Mobile Robot',
    description: 'Robot di ƒë·ªông t·ª± ch·ªß v·ªõi AI ti√™n ti·∫øn cho m√¥i tr∆∞·ªùng ph·ª©c t·∫°p',
    icon: 'ü§ñ',
    color: '#ff6b35',
    gradient: 'linear-gradient(135deg, #ff6b35, #cc5500)',
    features: [
      'AI Navigation',
      'Multi-sensor fusion',
      'Dynamic path planning',
      'Human detection',
      'Voice control',
      'Cloud integration'
    ],
    applications: [
      'E-commerce',
      'Manufacturing',
      'Healthcare',
      'Retail',
      'Education',
      'Research'
    ],
    modelPath: '/models/amr.glb',
    stats: [
      { label: 'T·∫£i tr·ªçng', value: '1500kg' },
      { label: 'T·ªëc ƒë·ªô', value: '1.5m/s' },
      { label: 'Pin', value: '10h' },
      { label: 'ƒê·ªô ch√≠nh x√°c', value: '¬±3mm' }
    ],
    benefits: [
      'T·ª± h·ªçc v√† th√≠ch nghi',
      'T∆∞∆°ng t√°c t·ª± nhi√™n',
      'B·∫£o m·∫≠t cao',
      'M·ªü r·ªông d·ªÖ d√†ng'
    ],
    technology: [
      'Deep Learning',
      'Computer Vision',
      'Natural Language Processing',
      'Cloud AI',
      '5G Network',
      'Blockchain'
    ]
  },
  {
    id: 'cobot',
    title: 'Cobot H·ª£p t√°c',
    titleEn: 'Collaborative Robot',
    description: 'Robot c·ªông t√°c an to√†n l√†m vi·ªác c√πng con ng∆∞·ªùi trong s·∫£n xu·∫•t',
    icon: 'ü¶æ',
    color: '#8b5cf6',
    gradient: 'linear-gradient(135deg, #8b5cf6, #6b46c1)',
    features: [
      'Force sensing',
      'Human detection',
      'Easy programming',
      'Quick deployment',
      'Safety certified',
      'Flexible mounting'
    ],
    applications: [
      'Assembly line',
      'Quality inspection',
      'Packaging',
      'Material handling',
      'Welding',
      'Painting'
    ],
    modelPath: '/models/cobot.glb',
    stats: [
      { label: 'T·∫£i tr·ªçng', value: '10kg' },
      { label: 'ƒê·ªô ch√≠nh x√°c', value: '¬±0.1mm' },
      { label: 'T·ªëc ƒë·ªô', value: '2m/s' },
      { label: 'Ph·∫°m vi', value: '1.3m' }
    ],
    benefits: [
      'An to√†n tuy·ªát ƒë·ªëi',
      'D·ªÖ s·ª≠ d·ª•ng',
      'ROI nhanh',
      'Linh ho·∫°t cao'
    ],
    technology: [
      'Force Control',
      'Vision Systems',
      'Safety Sensors',
      'IoT Platform',
      'Edge Computing',
      'Digital Twin'
    ]
  },
  {
    id: 'warehouse',
    title: 'Kho th√¥ng minh',
    titleEn: 'Smart Warehouse',
    description: 'H·ªá th·ªëng kho t·ª± ƒë·ªông h√≥a ho√†n to√†n v·ªõi robot v√† AI',
    icon: 'üè≠',
    color: '#10b981',
    gradient: 'linear-gradient(135deg, #10b981, #059669)',
    features: [
      'AS/RS System',
      'Multi-level storage',
      'Automated picking',
      'Real-time tracking',
      'Predictive analytics',
      'Energy optimization'
    ],
    applications: [
      'E-commerce',
      'Manufacturing',
      'Pharmaceuticals',
      'Food & Beverage',
      'Automotive',
      'Electronics'
    ],
    modelPath: '/models/warehouse.glb',
    stats: [
      { label: 'Dung t√≠ch', value: '50,000m¬≥' },
      { label: 'Th√¥ng l∆∞·ª£ng', value: '10,000/h' },
      { label: 'ƒê·ªô ch√≠nh x√°c', value: '99.9%' },
      { label: 'Ti·∫øt ki·ªám', value: '70%' }
    ],
    benefits: [
      'T·ªëi ∆∞u kh√¥ng gian',
      'Gi·∫£m l·ªói',
      'TƒÉng t·ªëc ƒë·ªô',
      'Ti·∫øt ki·ªám chi ph√≠'
    ],
    technology: [
      'AS/RS Technology',
      'WMS Integration',
      'IoT Sensors',
      'AI Analytics',
      'Cloud Platform',
      'Digital Twin'
    ]
  }
];

const Solutions3DViewer: React.FC = () => {
  const [selectedSolution, setSelectedSolution] = useState<Solution>(solutions[0]!);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'overview' | 'features' | 'technology' | 'benefits'>('overview');
  const { setCurrentSection } = useAppStore();

  useEffect(() => {
    const timer = setTimeout(() => setIsLoading(false), 1000);
    return () => clearTimeout(timer);
  }, []);

  if (isLoading) {
    return (
      <div className="solutions-loading">
        <div className="loading-spinner"></div>
        <h2>ƒêang t·∫£i gi·∫£i ph√°p...</h2>
      </div>
    );
  }

  return (
    <div className="solutions-3d-viewer">
      {/* Hero Section */}
      <div className="solutions-hero">
        <div className="hero-content">
          <div className="hero-badge">
            <span>üöÄ</span>
            <span>Gi·∫£i ph√°p C√¥ng ngh·ªá H√†ng ƒë·∫ßu</span>
          </div>
          <h1 className="hero-title">
            T∆∞∆°ng lai c·ªßa <span className="title-highlight">T·ª± ƒë·ªông h√≥a</span> b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢y
          </h1>
          <p className="hero-subtitle">
            Kh√°m ph√° c√°c gi·∫£i ph√°p robot t·ª± ƒë·ªông h√≥a ti√™n ti·∫øn ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho Industry 4.0
          </p>
          <div className="hero-stats">
            <div className="stat-item">
              <div className="stat-number">500+</div>
              <div className="stat-label">D·ª± √°n th√†nh c√¥ng</div>
            </div>
            <div className="stat-item">
              <div className="stat-number">15+</div>
              <div className="stat-label">NƒÉm kinh nghi·ªám</div>
            </div>
            <div className="stat-item">
              <div className="stat-number">99%</div>
              <div className="stat-label">Kh√°ch h√†ng h√†i l√≤ng</div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="solutions-main">
        <div className="solutions-grid">
          {/* Menu Panel */}
          <div className="solutions-menu-panel">
            <div className="menu-header">
              <h3>Gi·∫£i ph√°p c·ªßa ch√∫ng t√¥i</h3>
              <p>Ch·ªçn gi·∫£i ph√°p ƒë·ªÉ xem chi ti·∫øt</p>
            </div>
            <div className="solutions-menu">
              {solutions.map((solution) => (
                <motion.div
                  key={solution.id}
                  className={`solution-menu-item ${selectedSolution.id === solution.id ? 'active' : ''}`}
                  onClick={() => setSelectedSolution(solution)}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <div className="menu-item-content">
                    <div className="menu-item-icon" style={{ color: solution.color }}>
                      {solution.icon}
                    </div>
                    <div className="menu-item-info">
                      <h4 className="menu-item-title">{solution.title}</h4>
                      <p className="menu-item-subtitle">{solution.titleEn}</p>
                      <p className="menu-item-description">{solution.description}</p>
                    </div>
                    <div className="menu-item-arrow">‚Üí</div>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>

          {/* Details Panel */}
          <div className="solution-details-panel">
            <div className="solution-header">
              <div className="solution-icon" style={{ color: selectedSolution.color }}>
                {selectedSolution.icon}
              </div>
              <div className="solution-info">
                <h2 className="solution-title">{selectedSolution.title}</h2>
                <p className="solution-subtitle">{selectedSolution.titleEn}</p>
                <p className="solution-description">{selectedSolution.description}</p>
              </div>
            </div>

            {/* Stats Grid */}
            <div className="solution-stats">
              {selectedSolution.stats.map((stat, index) => (
                <motion.div
                  key={index}
                  className="stat-card"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <div className="stat-value" style={{ color: selectedSolution.color }}>
                    {stat.value}
                  </div>
                  <div className="stat-label">{stat.label}</div>
                </motion.div>
              ))}
            </div>

            {/* Tabs */}
            <div className="solution-tabs">
              <button
                className={`tab-btn ${activeTab === 'overview' ? 'active' : ''}`}
                onClick={() => setActiveTab('overview')}
              >
                T·ªïng quan
              </button>
              <button
                className={`tab-btn ${activeTab === 'features' ? 'active' : ''}`}
                onClick={() => setActiveTab('features')}
              >
                T√≠nh nƒÉng
              </button>
              <button
                className={`tab-btn ${activeTab === 'technology' ? 'active' : ''}`}
                onClick={() => setActiveTab('technology')}
              >
                C√¥ng ngh·ªá
              </button>
              <button
                className={`tab-btn ${activeTab === 'benefits' ? 'active' : ''}`}
                onClick={() => setActiveTab('benefits')}
              >
                L·ª£i √≠ch
              </button>
            </div>

            {/* Tab Content */}
            <div className="tab-content">
              <AnimatePresence mode="wait">
                <motion.div
                  key={activeTab}
                  className="tab-panel"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.3 }}
                >
                  {activeTab === 'overview' && (
                    <div className="overview-content">
                      <div className="overview-section">
                        <h3>·ª®ng d·ª•ng ch√≠nh</h3>
                        <div className="applications-grid">
                          {selectedSolution.applications.map((app, index) => (
                            <motion.div
                              key={index}
                              className="application-tag"
                              initial={{ opacity: 0, scale: 0.8 }}
                              animate={{ opacity: 1, scale: 1 }}
                              transition={{ delay: index * 0.05 }}
                            >
                              {app}
                            </motion.div>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}

                  {activeTab === 'features' && (
                    <div className="features-content">
                      <div className="features-grid">
                        {selectedSolution.features.map((feature, index) => (
                          <motion.div
                            key={index}
                            className="feature-item"
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.1 }}
                          >
                            <div className="feature-icon">‚úì</div>
                            <div className="feature-text">{feature}</div>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  )}

                  {activeTab === 'technology' && (
                    <div className="technology-content">
                      <div className="technology-grid">
                        {selectedSolution.technology.map((tech, index) => (
                          <motion.div
                            key={index}
                            className="technology-item"
                            style={{ background: selectedSolution.gradient }}
                            initial={{ opacity: 0, scale: 0.8 }}
                            animate={{ opacity: 1, scale: 1 }}
                            transition={{ delay: index * 0.1 }}
                          >
                            {tech}
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  )}

                  {activeTab === 'benefits' && (
                    <div className="benefits-content">
                      <div className="benefits-grid">
                        {selectedSolution.benefits.map((benefit, index) => (
                          <motion.div
                            key={index}
                            className="benefit-item"
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: index * 0.1 }}
                          >
                            <div className="benefit-icon">üéØ</div>
                            <div className="benefit-text">{benefit}</div>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  )}
                </motion.div>
              </AnimatePresence>
            </div>

            {/* CTA Buttons */}
            <div className="solution-cta">
              <button
                className="btn btn-primary"
                style={{ background: selectedSolution.gradient }}
                onClick={() => setCurrentSection('contact')}
              >
                <span>üìû</span>
                <span>T∆∞ v·∫•n tri·ªÉn khai</span>
              </button>
              <button className="btn btn-secondary">
                <span>üìã</span>
                <span>T·∫£i brochure</span>
              </button>
              <button className="btn btn-outline">
                <span>üé•</span>
                <span>Xem demo</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Model Section */}
      <div className="model-section">
        <div className="model-header">
          <h2>M√¥ h√¨nh 3D {selectedSolution.title}</h2>
          <p>T∆∞∆°ng t√°c v·ªõi m√¥ h√¨nh 3D ƒë·ªÉ kh√°m ph√° chi ti·∫øt k·ªπ thu·∫≠t</p>
        </div>
        <div className="model-viewer-container">
          <div className="model-viewer">
            <Suspense fallback={
              <div className="model-loading">
                <div className="loading-dots">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
                <p>ƒêang t·∫£i model 3D...</p>
              </div>
            }>
              <Canvas
                camera={{ position: [0, 0, 5], fov: 75 }}
                style={{ width: '100%', height: '500px' }}
              >
                <ambientLight intensity={0.5} />
                <pointLight position={[10, 10, 10]} />
                <spotLight position={[-10, -10, -10]} angle={0.15} penumbra={1} />
                <ModelComponent modelPath={selectedSolution.modelPath} />
                <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />
                <Environment preset="city" />
              </Canvas>
            </Suspense>
            <div className="model-controls">
              <button className="control-btn">
                <span>üîÑ</span>
                <span>Xoay</span>
              </button>
              <button className="control-btn">
                <span>üîç</span>
                <span>Zoom</span>
              </button>
              <button className="control-btn">
                <span>üì±</span>
                <span>VR</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Additional Sections */}
      <div className="additional-sections">
        {/* Case Studies Section */}
        <div className="case-studies-section">
          <div className="section-header">
            <h2>D·ª± √°n ti√™u bi·ªÉu</h2>
            <p>Kh√°m ph√° c√°c d·ª± √°n th√†nh c√¥ng c·ªßa ch√∫ng t√¥i</p>
          </div>
          <div className="case-studies-grid">
            {[
              { title: 'VinFast Factory', description: 'T·ª± ƒë·ªông h√≥a d√¢y chuy·ªÅn s·∫£n xu·∫•t √¥ t√¥', image: 'üöó' },
              { title: 'Viettel Data Center', description: 'H·ªá th·ªëng kho th√¥ng minh', image: 'üè¢' },
              { title: 'FPT Software', description: 'Robot c·ªông t√°c trong R&D', image: 'üíª' },
              { title: 'Vingroup Mall', description: 'AGV logistics t·ª± ƒë·ªông', image: 'üõí' }
            ].map((project, index) => (
              <motion.div
                key={index}
                className="case-study-card"
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <div className="case-study-image">{project.image}</div>
                <h3>{project.title}</h3>
                <p>{project.description}</p>
                <button className="btn btn-outline">Xem chi ti·∫øt</button>
              </motion.div>
            ))}
          </div>
        </div>

        {/* Technology Stack Section */}
        <div className="tech-stack-section">
          <div className="section-header">
            <h2>C√¥ng ngh·ªá n·ªÅn t·∫£ng</h2>
            <p>ƒê∆∞·ª£c x√¢y d·ª±ng tr√™n c√°c c√¥ng ngh·ªá ti√™n ti·∫øn nh·∫•t</p>
          </div>
          <div className="tech-stack-grid">
            {[
              { name: 'AI/ML', icon: 'üß†', description: 'Tr√≠ tu·ªá nh√¢n t·∫°o v√† h·ªçc m√°y' },
              { name: 'IoT', icon: 'üåê', description: 'Internet of Things' },
              { name: '5G', icon: 'üì°', description: 'K·∫øt n·ªëi 5G t·ªëc ƒë·ªô cao' },
              { name: 'Cloud', icon: '‚òÅÔ∏è', description: 'ƒêi·ªán to√°n ƒë√°m m√¢y' },
              { name: 'Edge', icon: '‚ö°', description: 'X·ª≠ l√Ω bi√™n' },
              { name: 'Blockchain', icon: 'üîó', description: 'C√¥ng ngh·ªá chu·ªói kh·ªëi' }
            ].map((tech, index) => (
              <motion.div
                key={index}
                className="tech-stack-item"
                initial={{ opacity: 0, scale: 0.8 }}
                whileInView={{ opacity: 1, scale: 1 }}
                transition={{ delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <div className="tech-icon">{tech.icon}</div>
                <h3>{tech.name}</h3>
                <p>{tech.description}</p>
              </motion.div>
            ))}
          </div>
        </div>

        {/* Services Section */}
        <div className="services-section">
          <div className="section-header">
            <h2>D·ªãch v·ª• h·ªó tr·ª£</h2>
            <p>ƒê·ªìng h√†nh c√πng b·∫°n trong m·ªçi giai ƒëo·∫°n</p>
          </div>
          <div className="services-grid">
            {[
              { title: 'T∆∞ v·∫•n', icon: 'üí°', description: 'Ph√¢n t√≠ch v√† thi·∫øt k·∫ø gi·∫£i ph√°p' },
              { title: 'Tri·ªÉn khai', icon: 'üöÄ', description: 'C√†i ƒë·∫∑t v√† t√≠ch h·ª£p h·ªá th·ªëng' },
              { title: 'ƒê√†o t·∫°o', icon: 'üéì', description: 'Hu·∫•n luy·ªán nh√¢n vi√™n v·∫≠n h√†nh' },
              { title: 'B·∫£o tr√¨', icon: 'üîß', description: 'B·∫£o tr√¨ v√† n√¢ng c·∫•p li√™n t·ª•c' },
              { title: 'H·ªó tr·ª£ 24/7', icon: 'üÜò', description: 'H·ªó tr·ª£ k·ªπ thu·∫≠t kh√¥ng ng·ª´ng' },
              { title: 'T·ªëi ∆∞u', icon: 'üìà', description: 'T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t h·ªá th·ªëng' }
            ].map((service, index) => (
              <motion.div
                key={index}
                className="service-card"
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <div className="service-icon">{service.icon}</div>
                <h3>{service.title}</h3>
                <p>{service.description}</p>
              </motion.div>
            ))}
          </div>
        </div>

        {/* Contact CTA Section */}
        <div className="contact-cta-section">
          <div className="cta-content">
            <h2>S·∫µn s√†ng b·∫Øt ƒë·∫ßu d·ª± √°n c·ªßa b·∫°n?</h2>
            <p>Li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n mi·ªÖn ph√≠ v√† nh·∫≠n b√°o gi√° chi ti·∫øt</p>
            <div className="cta-buttons">
              <button className="btn btn-primary" onClick={() => setCurrentSection('contact')}>
                <span>üìû</span>
                <span>Li√™n h·ªá ngay</span>
              </button>
              <button className="btn btn-secondary">
                <span>üìã</span>
                <span>Y√™u c·∫ßu demo</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Chat Button */}
      <div className="chat-button">
        <span className="chat-icon">üí¨</span>
        <span className="chat-text">Chat v·ªõi ch√∫ng t√¥i</span>
        <span className="chat-emoji">üëã</span>
      </div>
    </div>
  );
};

export default Solutions3DViewer; 