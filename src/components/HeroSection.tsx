import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAppStore } from '../store/appStore';
import AnimatedCounter from './AnimatedCounter';  
import {motion, useInView, useAnimation} from 'framer-motion';

const HeroSection: React.FC = () => {
  const { setCurrentSection } = useAppStore();
  const navigate = useNavigate();
  const [currentStat, setCurrentStat] = useState(0);
  const [activeFeature, setActiveFeature] = useState(0);

  // T·∫°o separate refs v√† controls cho t·ª´ng animation
  const heroVisualRef = useRef(null);
  const aboutImageRef = useRef(null);
  const robotCardsRef = useRef(null);
  const featuresRef = useRef(null);
  const techHighlightsRef = useRef(null);
  
  const heroVisualInView = useInView(heroVisualRef, { once: true });
  const aboutImageInView = useInView(aboutImageRef, { once: true });
  const robotCardsInView = useInView(robotCardsRef, { once: true });
  const featuresInView = useInView(featuresRef, { once: true });
  const techHighlightsInView = useInView(techHighlightsRef, { once: true });
  
  const heroVisualControls = useAnimation();
  const aboutImageControls = useAnimation();
  const robotCardsControls = useAnimation();
  const featuresControls = useAnimation();
  const techHighlightsControls = useAnimation();
  
  // Animation cho hero visual
  useEffect(() => {
    if (heroVisualInView) {
      heroVisualControls.start("visible");
    } 
  }, [heroVisualInView]);

  // Animation cho about image
  useEffect(() => {
    if (aboutImageInView) {
      aboutImageControls.start("visible");
    } 
  }, [aboutImageInView]);

  // Animation cho robot cards
  useEffect(() => {
    if (robotCardsInView) {
      robotCardsControls.start("visible");
    } 
  }, [robotCardsInView]);

  // Animation cho features
  useEffect(() => {
    if (featuresInView) {
      featuresControls.start("visible");
    } 
  }, [featuresInView]);

  // Animation cho tech highlights
  useEffect(() => {
    if (techHighlightsInView) {
      techHighlightsControls.start("visible");
    } 
  }, [techHighlightsInView]);
  
  useEffect(() => {
    // Animate stats
    const targetStat = 500;
    const duration = 2000;
    const increment = targetStat / (duration / 16);
    
    const timer = setInterval(() => {
      setCurrentStat(prev => {
        if (prev >= targetStat) {
          clearInterval(timer);
          return targetStat;
        }
        return Math.min(prev + increment, targetStat);
      });
    }, 16);

    // Auto rotate features
    const featureTimer = setInterval(() => {
      setActiveFeature(prev => (prev + 1) % 3);
    }, 4000);

    return () => {
      clearInterval(timer);
      clearInterval(featureTimer);
    };
  }, []);

  const features = [
    {
      icon: "ü§ñ",
      title: "Robot AGV Th√¥ng Minh",
      description: "H·ªá th·ªëng robot t·ª± ƒë·ªông di chuy·ªÉn v·ªõi AI v√† c·∫£m bi·∫øn ti√™n ti·∫øn"
    },
    {
      icon: "‚ö°",
      title: "Camera AI nh·∫≠n di·ªán",
      description: "Ph√°t hi·ªán v√† nh·∫≠n di·ªán v·∫≠t th·ªÉ v·ªõi ƒë·ªô ch√≠nh x√°c cao "
    },
    {
      icon: "üåê",
      title: "Kho th√¥ng minh",
      description: "T·ª± ƒë·ªông h√≥a quy tr√¨nh v·∫≠n h√†nh kho, ƒë·∫£m b·∫£o ƒë·ªô an to√†n v√† hi·ªáu qu·∫£"
    }
  ];

  // Variants cho c√°c animations
  const heroVisualVariants = {
    hidden: { opacity: 0.1, x: 300 },
    visible: { opacity: 1, x: 0 }
  };

  const aboutImageVariants = {
    hidden: { opacity: 0.2, y: 200 },
    visible: { opacity: 1, y: 0 }
  };

  const robotCardVariants = {
    hidden: { opacity: 0.2, x: 600 },
    visible: { opacity: 1, x: 0 }
  };

  const featuresVariants = {
    hidden: { opacity: 0.2, y: 100 },
    visible: { opacity: 1, y: 0 }
  };

  const techHighlightsVariants = {
    hidden: { opacity: 0.2, y: 80 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <section className="hero">
      <div className="hero-background">
        <div className="hero-particles">
          {[...Array(30)].map((_, i) => (
            <div
              key={i}
              className="hero-particle"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 10}s`,
                animationDuration: `${6 + Math.random() * 4}s`
              }}
            ></div>
          ))}
        </div>
      </div>

      <div className="container">
        {/* Main Hero Content */}
        <section className='section-stack-cards'>
          <div className="hero-main">
            <div className="hero-content">
              <div className="hero-badge">
                <span>üöÄ</span>
                <span>Gi·∫£i ph√°p Robot th√¥ng minh</span>
              </div>
              
              <h1 className="hero-title">
                T∆∞∆°ng lai c·ªßa
                <span className="hero-title-highlight"> T·ª± ƒë·ªông h√≥a</span>
                <br />
                b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢y
              </h1>
              
              <p className="hero-subtitle">
                Ch√∫ng t√¥i cung c·∫•p c√°c gi·∫£i ph√°p robot t·ª± ƒë·ªông h√≥a ti√™n ti·∫øn, 
                gi√∫p doanh nghi·ªáp t·ªëi ∆∞u h√≥a quy tr√¨nh s·∫£n xu·∫•t v√† n√¢ng cao hi·ªáu qu·∫£ ho·∫°t ƒë·ªông.
              </p>
              
              <div className="hero-buttons">
                <button 
                  className="btn btn-primary"
                  onClick={() => navigate('/products')}
                >
                  <span>ü§ñ</span>
                  <span>Kh√°m ph√° s·∫£n ph·∫©m</span>
                </button>
                
                <button 
                  className="btn btn-secondary"
                  onClick={() => setCurrentSection('solutions')}
                >
                  <span>üí°</span>
                  <span>Gi·∫£i ph√°p</span>
                </button>
              </div>
            </div>
            
            <motion.div 
              ref={heroVisualRef}
              className="hero-visual"
              variants={heroVisualVariants}
              initial="hidden"
              animate={heroVisualControls}
              transition={{ duration: 1, delay: 0.2, ease: 'easeInOut'}}
            >
              <div className="hero-image-main">
                <img src="/robot1.png" alt="Robot t·ª± ƒë·ªông ch√≠nh" />
              </div>
            </motion.div>
          </div>
          <div className="hero-logo">
              <div className="hero-logo-main">
                <img src="/1.png" alt="Logo ThaDo Robot" />
              </div>
            </div>
        </section>
        
        <section className='section-stack-cards'>
          <div className="section-header" style={{position: 'sticky',top: '80px',margin: 'var(--space-3xl) 0',borderRadius: 'var(--radius-xl)',padding: 'var(--space-2xl)',background: 'var(--bg-glass-sticky)',backdropFilter: 'blur(20px)'}}>
            <h2 className="section-title">V·ªÅ <span style={{color: 'var(--primary)'}} className="text-company">Thadorobot</span></h2>
            
            <div className="hero-about-layout">
              <motion.div 
                ref={aboutImageRef}
                className="hero-about-image"
                variants={aboutImageVariants}
                initial="hidden"
                animate={aboutImageControls}
                transition={{ duration: 1, delay: 0.3}}
              >
                <img src="../Office_aboutus.png" alt="Logo ThaDo Robot" />
              </motion.div>
              
              <div className="hero-about-content">
                <p className="section-subtitle">
                l√† m·ªôt doanh nghi·ªáp h√†ng ƒë·∫ßu t·∫°i Vi·ªát Nam, chuy√™n cung c·∫•p c√°c gi·∫£i ph√°p c√¥ng ngh·ªá ti√™n ti·∫øn trong lƒ©nh v·ª±c Robot v√† Nh√† m√°y th√¥ng minh. Ch√∫ng t√¥i ho·∫°t ƒë·ªông m·∫°nh m·∫Ω trong c√°c lƒ©nh v·ª±c ch·ªß ch·ªët nh∆∞ H·ªá th·ªëng ƒë√≥ng g√≥i t·ª± ƒë·ªông (APS), Gi·∫£i ph√°p t·ª± ƒë·ªông h√≥a nh√† m√°y (FAS), v√† Gi·∫£i ph√°p qu·∫£n l√Ω kho th√¥ng minh (SWS)
                </p>
                <div className="hero-stats">
                    <div className="hero-stat">
                        <div className="hero-stat-number"><AnimatedCounter from={0} to={Math.round(currentStat)}/>+</div>
                      <div className="hero-stat-label">D·ª± √°n th√†nh c√¥ng</div>
                    </div>
                    <div className="hero-stat">
                      <div className="hero-stat-number"><AnimatedCounter from={0} to={5}/>+</div>
                      <div className="hero-stat-label">NƒÉm kinh nghi·ªám</div>
                    </div>
                    <div className="hero-stat">
                      <div className="hero-stat-number"><AnimatedCounter from={0} to={99}/>%</div>
                      <div className="hero-stat-label">Kh√°ch h√†ng h√†i l√≤ng</div>
                    </div>
                  </div>
              </div>
            </div>
          </div>
        </section>

        {/* Robot Showcase */}
        <section className='section-stack-cards'>
          <div className="hero-robots-showcase">
            <h2 className="hero-robots-showcase-title"> S·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i</h2>
            <div ref={robotCardsRef} className="robots-grid">
              {[
                { img: "/robot2.png", title: "AGV Robot", desc: "T·ª± ƒë·ªông di chuy·ªÉn h√†ng h√≥a" },
                { img: "/robot3.png", title: "Assembly Robot", desc: "L·∫Øp r√°p t·ª± ƒë·ªông ch√≠nh x√°c" },
                { img: "/robot4.png", title: "Logistics Robot", desc: "Qu·∫£n l√Ω kho th√¥ng minh" },
                { img: "/robot5.png", title: "Manufacturing Robot", desc: "S·∫£n xu·∫•t t·ª± ƒë·ªông h√≥a" }
              ].map((robot, index) => (
                <motion.div 
                  key={index}
                  className="robot-card"
                  onClick={() => navigate('/products')}
                  style={{ cursor: 'pointer' }}
                  variants={{
                    hidden: { opacity: 0.2, x: 600 - (index * 100) },
                    visible: { opacity: 1, x: 0 }
                  }}
                  initial="hidden"
                  animate={robotCardsControls}
                  transition={{ duration: 1.2, delay: index * 0.1 }}
                >
                  <div className="robot-image">
                    <img src={robot.img} alt={robot.title} />
                  </div>
                  <div className="robot-info">
                    <h4>{robot.title}</h4>
                    <p>{robot.desc}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        </section>

        {/* Solution Section */}
        <section className='section-stack-cards'>
          <div className="hero-solution">
            <h2 className="hero-solution-title"> Gi·∫£i ph√°p c·ªßa ch√∫ng t√¥i</h2>
            {/* Features Section */}
            <div className="hero-features">
              <motion.div 
                ref={featuresRef}
                className="features-container"
                variants={featuresVariants}
                initial="hidden"
                animate={featuresControls}
                transition={{ duration: 0.8, delay: 0.2 }}
              >
                {features.map((feature, index) => (
                  <div 
                    key={index}
                    className={`feature-card ${index === activeFeature ? 'active' : ''}`}
                    onClick={() => setActiveFeature(index)}
                  >
                    <div className="feature-icon">{feature.icon}</div>
                    <div className="feature-content">
                      <h3>{feature.title}</h3>
                      <p>{feature.description}</p>
                    </div>
                    <div className="feature-arrow">‚Üí</div>
                  </div>
                ))}
              </motion.div>
            </div>

            {/* Technology Highlights */}
            <div className="hero-tech-highlights">
              <motion.div 
                ref={techHighlightsRef}
                className="tech-highlights-grid"
                variants={techHighlightsVariants}
                initial="hidden"
                animate={techHighlightsControls}
                transition={{ duration: 0.8, delay: 0.4 }}
              >
                <div className="tech-highlight">
                  <div className="tech-icon">üîã</div>
                  <div className="tech-content">
                    <h4>Pin Li-ion</h4>
                    <p>Th·ªùi gian ho·∫°t ƒë·ªông l√™n ƒë·∫øn 8 gi·ªù</p>
                  </div>
                </div>
                
                <div className="tech-highlight">
                  <div className="tech-icon">üì°</div>
                  <div className="tech-content">
                    <h4>5G Connectivity</h4>
                    <p>K·∫øt n·ªëi si√™u nhanh v√† ·ªïn ƒë·ªãnh</p>
                  </div>
                </div>
                
                <div className="tech-highlight">
                  <div className="tech-icon">üéØ</div>
                  <div className="tech-content">
                    <h4>AI Navigation</h4>
                    <p>ƒê·ªãnh v·ªã ch√≠nh x√°c v·ªõi AI</p>
                  </div>
                </div>
                
                <div className="tech-highlight">
                  <div className="tech-icon">üõ°Ô∏è</div>
                  <div className="tech-content">
                    <h4>Safety System</h4>
                    <p>H·ªá th·ªëng an to√†n ƒëa l·ªõp</p>
                  </div>
                </div>
              </motion.div>
            </div>
          </div>
        </section>
        {/* Call to Action */}
        {/* <div className="hero-cta">
          <div className="cta-content">
            <h3>S·∫µn s√†ng chuy·ªÉn ƒë·ªïi s·ªë?</h3>
            <p>Li√™n h·ªá ngay ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n mi·ªÖn ph√≠ v√† demo tr·ª±c ti·∫øp</p>
            <div className="cta-buttons">
              <button 
                className="btn btn-primary"
                onClick={() => setCurrentSection('contact')}
              >
                <span>üìû</span>
                <span>Li√™n h·ªá ngay</span>
              </button>
              <button className="btn btn-outline">
                <span>üìã</span>
                <span>Y√™u c·∫ßu demo</span>
              </button>
            </div>
          </div>
        </div> */}
      </div>
    </section>
  );
};

export default HeroSection;