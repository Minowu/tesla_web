import React, { useState } from 'react';

// Solutions Data based on the image
const solutions = [
  {
    id: 'robot-system',
    title: 'H·ªÜ TH·ªêNG ROBOT',
    subtitle: 'Robot System',
    icon: 'ü§ñ',
    color: 'var(--primary)',
    description: 'H·ªá th·ªëng robot c√¥ng nghi·ªáp t·ª± ƒë·ªông h√≥a v·ªõi ƒë·ªô ch√≠nh x√°c cao',
    features: ['C√°nh tay robot c√¥ng nghi·ªáp', 'X·ª≠ l√Ω v·∫≠t th·ªÉ t·ª± ƒë·ªông', 'ƒê·ªô ch√≠nh x√°c cao', 'T√≠ch h·ª£p AI']
  },
  {
    id: 'packing-system',
    title: 'H·ªÜ TH·ªêNG ƒê√ìNG G√ìI',
    subtitle: 'Packing System',
    icon: 'üì¶',
    color: 'var(--secondary)',
    description: 'D√¢y chuy·ªÅn ƒë√≥ng g√≥i t·ª± ƒë·ªông cho nh√† m√°y s·∫£n xu·∫•t',
    features: ['ƒê√≥ng g√≥i t·ª± ƒë·ªông', 'D√¢y chuy·ªÅn s·∫£n xu·∫•t', 'Ki·ªÉm so√°t ch·∫•t l∆∞·ª£ng', 'T·ªëi ∆∞u hi·ªáu su·∫•t']
  },
  {
    id: 'smart-warehouse',
    title: 'KHO H√ÄNG TH√îNG MINH',
    subtitle: 'Smart Warehouse',
    icon: 'üè≠',
    color: 'var(--accent)',
    description: 'H·ªá th·ªëng kho h√†ng t·ª± ƒë·ªông v·ªõi AS/RS v√† robot v·∫≠n chuy·ªÉn',
    features: ['AS/RS t·ª± ƒë·ªông', 'Robot v·∫≠n chuy·ªÉn', 'Qu·∫£n l√Ω kho th√¥ng minh', 'Truy xu·∫•t nhanh']
  },
  {
    id: 'services',
    title: 'D·ªäCH V·ª§ L·∫ÆP ƒê·∫∂T & B·∫¢O TR√å',
    subtitle: 'Services',
    icon: 'üîß',
    color: 'var(--primary)',
    description: 'D·ªãch v·ª• l·∫Øp ƒë·∫∑t, b·∫£o tr√¨ v√† h·ªó tr·ª£ k·ªπ thu·∫≠t chuy√™n nghi·ªáp',
    features: ['L·∫Øp ƒë·∫∑t chuy√™n nghi·ªáp', 'B·∫£o tr√¨ ƒë·ªãnh k·ª≥', 'H·ªó tr·ª£ 24/7', 'ƒê√†o t·∫°o nh√¢n vi√™n']
  },
  {
    id: 'ai-vision-robot',
    title: 'H·ªÜ TH·ªêNG ROBOT, CAMERA AI',
    subtitle: 'AI Vision, Robot System',
    icon: 'üëÅÔ∏è',
    color: 'var(--secondary)',
    description: 'H·ªá th·ªëng th·ªã gi√°c m√°y t√≠nh t√≠ch h·ª£p AI cho robot',
    features: ['AI Vision Processing', 'Computer Vision', 'Machine Learning', 'Real-time Analysis']
  },
  {
    id: 'smart-locker',
    title: 'T·ª¶ ƒê·ªí TH√îNG MINH',
    subtitle: 'Smart Locker',
    icon: 'üóÑÔ∏è',
    color: 'var(--accent)',
    description: 'H·ªá th·ªëng t·ªß kh√≥a th√¥ng minh cho nh·∫≠n/g·ª≠i b∆∞u ki·ªán t·ª± ƒë·ªông',
    features: ['Nh·∫≠n/g·ª≠i t·ª± ƒë·ªông', 'B·∫£o m·∫≠t cao', 'Qu·∫£n l√Ω th√¥ng minh', 'T√≠ch h·ª£p IoT']
  },
  {
    id: 'smart-factory',
    title: 'NH√Ä M√ÅY TH√îNG MINH',
    subtitle: 'Smart Factory',
    icon: 'üè≠',
    color: 'var(--primary)',
    description: 'Nh√† m√°y t·ª± ƒë·ªông h√≥a cao v·ªõi robot v√† m√°y m√≥c th√¥ng minh',
    features: ['T·ª± ƒë·ªông h√≥a to√†n di·ªán', 'Robot c√¥ng nghi·ªáp', 'Trung t√¢m ƒëi·ªÅu khi·ªÉn', 'IoT Integration']
  },
  {
    id: 'smart-building',
    title: 'T√íA NH√Ä TH√îNG MINH',
    subtitle: 'Smart Building',
    icon: 'üè¢',
    color: 'var(--secondary)',
    description: 'H·ªá th·ªëng t√≤a nh√† th√¥ng minh v·ªõi camera an ninh v√† qu·∫£n l√Ω nƒÉng l∆∞·ª£ng',
    features: ['Camera an ninh', 'ƒêi·ªÅu khi·ªÉn √°nh s√°ng', 'Qu·∫£n l√Ω nƒÉng l∆∞·ª£ng', 'H·ªá th·ªëng th√¥ng minh']
  }
];

const SolutionsHexagon: React.FC = () => {
  const [selectedSolution, setSelectedSolution] = useState<string | null>(null);

  return (
    <section className="solutions-hexagon">
      <div className="container">
        <div className="section-header">
          <h2 className="section-title">
            Gi·∫£i Ph√°p <span className="text-gradient">THADOSOFT</span>
          </h2>
          <p className="section-subtitle">
            Kh√°m ph√° c√°c h·ªá th·ªëng v√† d·ªãch v·ª• th√¥ng minh gi√∫p doanh nghi·ªáp c·ªßa b·∫°n ph√°t tri·ªÉn b·ªÅn v·ªØng
          </p>
        </div>

        <div className="hexagon-container">
          {/* Central Logo */}
          <div className="central-logo">
            <div className="logo-circle">
              <div className="logo-icon">‚ö°</div>
              <h3>THADOSOFT</h3>
            </div>
          </div>

          {/* Hexagon Solutions */}
          <div className="hexagon-grid">
            {solutions.map((solution, index) => (
              <div
                key={solution.id}
                className={`hexagon-item ${selectedSolution === solution.id ? 'active' : ''}`}
                style={{ 
                  '--hex-color': solution.color,
                  '--hex-index': index 
                } as React.CSSProperties}
                onClick={() => setSelectedSolution(selectedSolution === solution.id ? null : solution.id)}
              >
                <div className="hexagon-content">
                  <div className="hexagon-icon">{solution.icon}</div>
                  <div className="hexagon-text">
                    <h4>{solution.title}</h4>
                    <p>{solution.subtitle}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Solution Details Modal */}
        {selectedSolution && (
          <div className="solution-modal">
            <div className="modal-content">
              <button 
                className="modal-close"
                onClick={() => setSelectedSolution(null)}
              >
                √ó
              </button>
              
              {(() => {
                const solution = solutions.find(s => s.id === selectedSolution);
                if (!solution) return null;
                
                return (
                  <>
                    <div className="modal-header">
                      <div className="modal-icon" style={{ color: solution.color }}>
                        {solution.icon}
                      </div>
                      <div className="modal-title">
                        <h3>{solution.title}</h3>
                        <p>{solution.subtitle}</p>
                      </div>
                    </div>
                    
                    <div className="modal-body">
                      <p className="modal-description">{solution.description}</p>
                      
                      <div className="modal-features">
                        <h4>T√≠nh nƒÉng ch√≠nh</h4>
                        <ul>
                          {solution.features.map((feature, index) => (
                            <li key={index}>
                              <span className="feature-icon">‚úì</span>
                              {feature}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                    
                    <div className="modal-actions">
                      <button className="btn btn-primary">
                        <span>Kh√°m ph√° chi ti·∫øt</span>
                        <span className="btn-icon">‚Üí</span>
                      </button>
                      <button className="btn btn-secondary">
                        <span>Li√™n h·ªá t∆∞ v·∫•n</span>
                      </button>
                    </div>
                  </>
                );
              })()}
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default SolutionsHexagon;
